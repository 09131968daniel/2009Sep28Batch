--PLSQL
----PLSQL = procedural language sql (structured query language)
------it is an extension to sql
----PLPGSQL
------procedural language postgresql
----languages supported by psql for plsql
------PLPGSQL
------C
------PERL
------RUBY
------R
------PYTHON
------and many more


--functions
----create [or replace] function [name] (params types) return [type] as [delimiter]
--		begin
--			[body]
--		end
----[delimiter] language plpgsql


create or replace function sum(a integer, b integer) returns integer as '
	begin
		return a+b;
	end
' language plpgsql;

select sum(2,3) as function_sum;

--or replace is optional
create function concat_sum(a integer, b integer, s text) returns text as '
	begin
		return a+b||s;
	end
' language plpgsql;

select concat_sum(5,6,'hello');
-------------------------------------------------------------------
--dont have to put anything in the $$, just matters that those are delimiters
--using $$ means you can use '' or "" as need be within the function
create or replace function concat_sum2(a integer, b integer) returns text as $concat_sum2$
	begin
		return a+b||'hello';
	end
$concat_sum2$ language plpgsql;

select concat_sum2(9,2);
------------------------------------------------------------------
--you can use $# to indicate the position of a parameter instead of a name (starting at 1)
create or replace function mult(val1 integer, val2 integer, val3 integer) returns integer as $$
	begin
		return val1*val2*$3;
	end
$$ language plpgsql;

select mult(4,3,2);
------------------------------------------------------------------
--how to declare a variable inside a function
create or replace function create_var() returns text as $$
	declare 
		album text;
		largest integer;
	--language specific comments
	begin
		--into: put this value into this variable
		select max("AlbumId") into largest from "Album";
		select "Title" into album from "Album" where "AlbumId" = largest;
		return album;
	end
$$ language plpgsql;

select create_var();