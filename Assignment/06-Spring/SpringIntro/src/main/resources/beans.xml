<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xsi:schemaLocation="http://www.springframework.org/schema/beans
	 https://www.springframework.org/schema/beans/spring-beans.xsd">
	 
	 <!-- 
	 	scopes of a spring bean
	 				Spring 4 (This is the one to know)
	 					Singleton			creates one instance for all references
	 					Prototype			creates an instance for each reference
	 					Request				creates an instance for each http request
	 					Session				creates an instance for each http session
	 					GlobalSession		creates an instance for all http sessions
	 				
	 				Spring 5
	 					Singleton			creates one instance for all references
	 					Prototype			creates an instance for each reference
	 					Request				creates an instance for each http request
	 					Session				creates an instance for each http session
	 					GlobalSession		creates an instance for all http sessions
	 					Application			ties the instance to the lifecycle of the servlet context
	 					WebSocket			ties the instance to the lifecycle of the websocket
	  -->
	  
	  <!-- 
	  		There are 4 different types of Dependency Injection
	  				Constructor Injection (supported)
	  				Setter Injection (supported)
	  				Field Injection (unofficially supported)
	  				Interface Injection (not supported at all)
	   -->
	 
	 <!--  a bean is any object that spring manages for us.  -->
	 <bean id="mockdao" class="com.springy.repo.MockDao"/>
	 <!-- <bean class="com.springy.service.MockService" scope="prototype">
	 	bean wiring how we wire the different objects together
		  this is a constructor injection 
	 	<constructor-arg index="0" type="com.springy.repo.MockDao" ref ="mockdao"/>
	 	-->
	 <!--  this is setter injection -->
	 <!-- <bean class ="com.springy.service.MockService">
	 	<property name ="md" ref = "mockdao"></property>
	 </bean> -->
	 
	 <!--  auto wiring -->
	 <bean class ="com.springy.service.MockService" autowire="byType"/>
	
	 <!--  injecting primitives -->
	 <!--<bean class ="com.springy.service.MockService" autowire="byType">
	 	<constructor-arg index ="1" type="int" value="5"/>
	 </bean>-->
	 
	 	
	 
	 <!-- 
	 	autowiring
	 		an automagical process of bean wiring. 
	 		4 types
	 			no						does no autowiring, set it to off
	 			byType					spring will autowire by looking at the class'
	 										property datatypes and matching them to the bean
	 										in the ioc container. This uses setter injection
	 			constructor				works similar to byType, except it uses constructor injection
	 										and checks the type inside the constructor parameters and mataches
	 										it to the bean in the ioc container. 
	 			byName					Looks at the class's property variable names and finds beans in 
	 										the container with the same name. It uses setter injection.
	  -->
	 
	 

</beans>